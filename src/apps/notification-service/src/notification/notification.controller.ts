// review.controller.ts
import { NotificationService } from './notification.service';
import { Controller, Get, HttpCode, HttpStatus, NotFoundException, Param, Post, Query } from '@nestjs/common';
import { EventPattern, Payload } from '@nestjs/microservices';
import { ApiOperation, ApiParam, ApiResponse, ApiTags } from '@nestjs/swagger';

@ApiTags('Notification')
@Controller('Notification')
// @UseInterceptors(NotificationInterceptor)
export class NotificationController {
  constructor(private readonly  notificationService: NotificationService) {}
  @EventPattern('review.due')
  async handleReviewDue(@Payload() data: { userId: string; count: number }) {
    console.log(' rabbit review due notify');
    console.log(' rabbit review due notify data', data);

    await this.notificationService.createAndSend({
      userId: data.userId,
      content: `B·∫°n c√≥ ${data.count} t·ª´ c·∫ßn √¥n luy·ªán!`,
      type: 'in-app',
    });
  }

  // üì§ FE g·ªçi API n√†y ƒë·ªÉ l·∫•y th√¥ng b√°o ch∆∞a ƒë·ªçc
  @Get()
  async getUnreadNotifications(@Query('userId') userId: string) {
    return this.notificationService.getUnreadByUser(userId);
  }


  @Post(':id/read')
  @HttpCode(HttpStatus.OK)
  @ApiOperation({ summary: 'ƒê√°nh d·∫•u th√¥ng b√°o ƒë√£ ƒë·ªçc' })
  @ApiParam({
    name: 'id',
    required: true,
    description: 'ID c·ªßa th√¥ng b√°o c·∫ßn ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc',
    type: String,
  })
  @ApiResponse({
    status: 200,
    description: 'Th√¥ng b√°o ƒë√£ ƒë∆∞·ª£c ƒë√°nh d·∫•u l√† ƒë√£ ƒë·ªçc',
  })
  @ApiResponse({
    status: 404,
    description: 'Kh√¥ng t√¨m th·∫•y th√¥ng b√°o',
  })
  async markAsRead(@Param('id') id: string) {
    const updated = await this.notificationService.markAsRead(id);
    if (!updated) {
      // Tr·∫£ v·ªÅ 404 n·∫øu kh√¥ng t√¨m th·∫•y
      throw new NotFoundException(`Notification with ID ${id} not found`);
    }
    return updated;
  }
}
