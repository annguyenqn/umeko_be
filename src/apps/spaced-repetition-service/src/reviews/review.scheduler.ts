import { Injectable, Logger, OnModuleInit } from '@nestjs/common';
import { Cron } from '@nestjs/schedule';
import { InjectModel } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { Review } from './schemas/review.schema';
import { ClientProxy } from '@nestjs/microservices';
import { Inject } from '@nestjs/common';

@Injectable()
export class ReviewScheduler implements OnModuleInit {
  private readonly logger = new Logger(ReviewScheduler.name);

  constructor(
    @InjectModel(Review.name) private readonly reviewModel: Model<Review>,
    @Inject('USER_SERVICE') private readonly userClient: ClientProxy,
  ) {}

  // T·∫°o index h·ªó tr·ª£ query nhanh
  async onModuleInit() {
    await this.reviewModel.collection.createIndex({ userId: 1, nextReview: 1, notified: 1 });
    this.logger.log('Index created for reviewModel (userId, nextReview, notified)');
  }

  // Cron job: m·ªói 2 ph√∫t check t·ª´ ƒë·∫øn h·∫°n
  @Cron('*/2 * * * *')
  async checkDueReviews() {
    const now = new Date();

    // Gom theo userId v√† ƒë·∫øm s·ªë t·ª´ ƒë·∫øn h·∫°n
    const dueReviews = await this.reviewModel.aggregate([
      {
        $match: {
          nextReview: { $lte: now },
          notified: { $ne: true },
        },
      },
      {
        $group: {
          _id: '$userId',
          count: { $sum: 1 },
        },
      },
    ]);

    // G·ª≠i s·ª± ki·ªán qua RabbitMQ v√† ƒë√°nh d·∫•u ƒë√£ th√¥ng b√°o
    for (const review of dueReviews) {
      const userId = review._id;
      const count = review.count;

      // G·ª≠i event t·ªõi user-service
      this.userClient.emit('review.due', { userId, count });

      // ƒê√°nh d·∫•u notified = true cho c√°c b·∫£n ghi ƒë√£ g·ª≠i
      await this.reviewModel.updateMany(
        { userId, nextReview: { $lte: now }, notified: { $ne: true } },
        { $set: { notified: true } },
      );

      this.logger.log(`üì¢ Sent review.due for user ${userId} with ${count} items.`);
    }
  }
}
